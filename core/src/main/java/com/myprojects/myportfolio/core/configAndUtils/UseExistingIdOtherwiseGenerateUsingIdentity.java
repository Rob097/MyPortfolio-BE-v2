package com.myprojects.myportfolio.core.configAndUtils;

import io.jsonwebtoken.Identifiable;
import org.hibernate.HibernateException;
import org.hibernate.MappingException;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.id.Configurable;
import org.hibernate.id.IdentifierGenerator;
import org.hibernate.id.IdentifierGeneratorHelper;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.type.Type;

import java.io.Serializable;
import java.util.Properties;

/**
 * Custom ID generator. It allows to override an autogenerated ID id present. Otherwise it generates a new ID.
 * Used In BaseDao.
 */
@SuppressWarnings("unused")
public class UseExistingIdOtherwiseGenerateUsingIdentity implements IdentifierGenerator, Configurable {

    @Override
    public Serializable generate(SharedSessionContractImplementor session, Object object) throws HibernateException {
        if (object instanceof Identifiable identifiable) {
            Serializable id = identifiable.getId();
            if (id != null) {
                return id;
            }
        }
        return IdentifierGeneratorHelper.getIntegralDataTypeHolder(Integer.class).makeValue();
    }

    @Override
    public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException {
        String entityName = params.getProperty(ENTITY_NAME);
    }
}
